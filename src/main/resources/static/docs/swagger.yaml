openapi: 3.0.1
info:
  title: API Challenge Java
  description: API for authentication, sales points, costs between points, and accreditations.
  version: 1.0.0
servers:
  - url: http://localhost:8080/api

paths:
  /auth/register:
    post:
      summary: Register new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '200':
          description: User successfully registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'

  /auth/login:
    post:
      summary: Log in
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthRequest'
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'

  /sale-points:
    get:
      summary: List sales points
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of sales points
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PointSaleResponse'

    post:
      summary: Add new sales point
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PointSaleRequest'
      responses:
        '200':
          description: Sales point successfully added

  /sale-points/{id}:
    put:
      summary: Update sales point
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PointSaleRequest'
      responses:
        '200':
          description: Sales point successfully updated

    delete:
      summary: Delete sales point
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Sales point successfully deleted

  /costs:
    post:
      summary: Add cost between sales points
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: cost
          required: true
          schema:
            type: number
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CostPointsRequest'
      responses:
        '200':
          description: Cost successfully added

    delete:
      summary: Delete cost between sales points
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CostPointsRequest'
      responses:
        '200':
          description: Cost successfully deleted

  /costs/{idA}:
    get:
      summary: List costs from sales point
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: idA
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: List of costs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CostPointsResponse'

  /costs/min:
    post:
      summary: Calculate minimum cost route
      security:
        - bearerAuth: []
      description: |
        ⚠️ IMPORTANT:
        Technically, this endpoint should be a GET because it doesn't modify data.
        However, it's defined as POST so Swagger UI can handle it properly,
        since GET methods are not allowed to have a request body (according to HTTP protocol restrictions).
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CostPointsRequest'
      responses:
        '200':
          description: Route and minimum cost
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MinCostRouteResponse'

  /accreditations:
    get:
      summary: Get all accreditations
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of accreditations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AccreditationsResponse'

    post:
      summary: Receive new accreditation
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccreditationsRequest'
      responses:
        '200':
          description: Accreditation successfully registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccreditationsResponse'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    AuthRequest:
      type: object
      properties:
        email:
          type: string
        password:
          type: string

    AuthResponse:
      type: object
      properties:
        token:
          type: string

    RegisterRequest:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        password:
          type: string

    PointSaleRequest:
      type: object
      properties:
        name:
          type: string

    PointSaleResponse:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string

    CostPointsRequest:
      type: object
      properties:
        idA:
          type: integer
        idB:
          type: integer

    CostPointsResponse:
      type: object
      properties:
        idA:
          type: integer
        idB:
          type: integer
        cost:
          type: number
        pointSaleName:
          type: string

    MinCostRouteResponse:
      type: object
      properties:
        ruta:
          type: array
          items:
            type: integer
        totalCost:
          type: number

    AccreditationsRequest:
      type: object
      properties:
        amount:
          type: number
        pointSaleId:
          type: integer

    AccreditationsResponse:
      type: object
      properties:
        id:
          type: integer
        amount:
          type: number
        pointSaleId:
          type: integer
        pointSaleName:
          type: string
        dateReception:
          type: string
          format: date
