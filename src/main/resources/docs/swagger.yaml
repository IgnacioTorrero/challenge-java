openapi: 3.0.1
info:
  title: API Challenge Java
  description: API para autenticación, puntos de venta, costos entre puntos y acreditaciones.
  version: 1.0.0
servers:
  - url: http://localhost:8080/api

paths:
  /auth/register:
    post:
      summary: Registrar nuevo usuario
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '200':
          description: Usuario registrado correctamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'

  /auth/login:
    post:
      summary: Iniciar sesión
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthRequest'
      responses:
        '200':
          description: Login exitoso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'

  /puntos-venta:
    get:
      summary: Listar puntos de venta
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Lista de puntos de venta
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PuntoVentaResponse'

    post:
      summary: Agregar nuevo punto de venta
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PuntoVentaRequest'
      responses:
        '200':
          description: Punto de venta agregado

  /puntos-venta/{id}:
    put:
      summary: Actualizar punto de venta
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PuntoVentaRequest'
      responses:
        '200':
          description: Punto de venta actualizado

    delete:
      summary: Eliminar punto de venta
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Punto de venta eliminado

  /costos:
    post:
      summary: Agregar costo entre puntos
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: costo
          required: true
          schema:
            type: number
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CostoPuntosRequest'
      responses:
        '200':
          description: Costo agregado

    delete:
      summary: Eliminar costo entre puntos
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CostoPuntosRequest'
      responses:
        '200':
          description: Costo eliminado

  /costos/{idA}:
    get:
      summary: Listar costos desde punto de venta
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: idA
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Lista de costos
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CostoPuntosResponse'

  /costos/minimo:
    post:
      summary: Calcular ruta de costo mínimo
      security:
        - bearerAuth: []
      description: |
        ⚠️ IMPORTANTE:
        Este endpoint técnicamente es un GET, porque no modifica datos.
        Pero se define como POST para que Swagger UI pueda enviarlo correctamente,
        ya que no permite body en métodos GET (según restricciones del protocolo HTTP).
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CostoPuntosRequest'
      responses:
        '200':
          description: Ruta y costo mínimo
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RutaCostoMinimoResponse'

  /acreditaciones:
    get:
      summary: Obtener todas las acreditaciones
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Lista de acreditaciones
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AcreditacionResponse'

    post:
      summary: Recibir nueva acreditación
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AcreditacionRequest'
      responses:
        '200':
          description: Acreditación registrada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AcreditacionResponse'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    AuthRequest:
      type: object
      properties:
        email:
          type: string
        password:
          type: string

    AuthResponse:
      type: object
      properties:
        token:
          type: string

    RegisterRequest:
      type: object
      properties:
        nombre:
          type: string
        email:
          type: string
        password:
          type: string

    PuntoVentaRequest:
      type: object
      properties:
        nombre:
          type: string

    PuntoVentaResponse:
      type: object
      properties:
        id:
          type: integer
        nombre:
          type: string

    CostoPuntosRequest:
      type: object
      properties:
        idA:
          type: integer
        idB:
          type: integer

    CostoPuntosResponse:
      type: object
      properties:
        idA:
          type: integer
        idB:
          type: integer
        costo:
          type: number
        nombrePuntoVenta:
          type: string

    RutaCostoMinimoResponse:
      type: object
      properties:
        ruta:
          type: array
          items:
            type: integer
        costoTotal:
          type: number

    AcreditacionRequest:
      type: object
      properties:
        importe:
          type: number
        idPuntoVenta:
          type: integer

    AcreditacionResponse:
      type: object
      properties:
        id:
          type: integer
        importe:
          type: number
        idPuntoVenta:
          type: integer
        nombrePuntoVenta:
          type: string
        fechaRecepcion:
          type: string
          format: date